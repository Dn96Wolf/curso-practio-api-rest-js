Caché vs memoria.

El Caché es la forma en el que el navegador siempre traera la ultima informacion que consume la api o la que se trendingPreview
guardada en cache, si alguna vez ya se hizo la solicitud de datos. 

en los navegarodes ya se valida el tiempo en el que los datos se guardan en el cache.

--la Memoization--

ya no es el navegador, si no es guardar los calculos que ya hicimos para no repetirlos. 

ejemplo: el fibonachi

crear un objeto
preguntar al objeto si ya tiene la informacion
si si se tiene, entonces la usa. si no, hace el fetch() y guarda la informacion en el objeto.

consideraciones:

    el codigo se guarda hasta que se refresca la pagina, si guardas algo en codigo se borraria al cerrar
    la pagina.
    para hacer memorization se debe usar otro metodo.


cache vs memorization

    el cambio en el backend es importante porque si en alguno de los datos ya cargados ya 
    sea en el cache o por medio de la memorization, a menos de que con memorization se recargue la 
    pagina para volver a hacer la peticion o al limpiar el cache, se tiene que volver a hacer la peticion.


Debuggeando Caché y Networking

la pestaña de Networking en el navegador es una herramienta que basicamente muestra los tiempos
de carga que tienen los recursos de la aplicacion, el html, el css, google fonts, javascript, las API, etx.. 
ademas que deja guardar un log, desabilitar el cache y tambien permite probar la app como si existieran 
redes 3G etc.

A demas que estos recursos pueden ser filtrados por tipos. 

fetch/xhr filtra las url de las peticiones de la API que esten relacionadas con la pagina actual. es decir muestra el
endpoint. 

si le das click derecho a la flechita de recargar te da opciones, una de ellas en vaciar el cache y cargar de manera forzada

al hacer eso, nos aparece el tamaño de los datos y el tiempo en que tardo la API en cargar la solicitud http. Al momento
de cambiar de pagina en la columna de tamaño puede aparece la leyenda disk cache en vez de un numero. Resulta que los navegadores
implementan el cache, como se acaba de cargar ya esa peticion, ya no se esta haciendo la solicitud. 

como ya se cargo la info anteriormente, el navegador devuelve esa info. 

---loading spinners vs loading skeletons---

los usuarios odian esperar... si una pagina tarda en cargar de 1 a 3 segundos, la cantidad de usuarios que dejan la pagina
incrementa 32% ... entonces que no se demore no manchis.

las loading screen
    reconocible, facil diferenciarla de los tipos de pantallas ya sea de error, de carga o de ...

    hay que hacer que la carga sea tolerable o divertida. (mientras mas rapido cargue mejor).
    como frontend hay que hacer entretenida la espera.

loadings spinners o loadings animations
    primero fue la ruedita infinita
    luego fueron las barras de porcentaje como la de los videojuegos
        el problema de las apps webs, las barras de porcentaje no son lo mejor, ademas normalmente estan hardcodeadas...
        ya que no se sabe bien que porcentaje de la data se carga, entonces no hay forma de saber si la API responde
        con un porcentaje. 
        en los juegos de consola en teoria si se sabe porque ahi la informacion esta mas controlada.

    los loadings skeletons (pantallas de carga), lo importante es que cumplen con las buenas practicas. Por ejemplo, en youtube
    aparecen el html como por debajo de donde deveria ir la info, es decir la estructura del contenido de la pagina con cierta animacion.
    esa estrategia esta muy bien ya que varias de las paginas importantes usan este tipo de loading.
    


--intersection observer--

lazyLoading - carga peresosa, detectar cuales imagenes se alcanzan a ver y si se hace scroll o navegacion
se vean.


scrollTop devuelve el valor de la posicion donde esta el scroll, si es a inicio de la vista, esta en 0 si esta
debajo de la pagina estara en la haltura maxima de la pagina.

document.documentElement.clientHeight da el tamaño total de la ventana que puede ver el usuario.



-- local storage vs api real --

mas rapido
depende del navegador
independiente de la application
control completo del frontend

consultas al almacenamiento local...

en el caso del local storage tambien podemos ordenar la info como la queramos guardar.

por otro lado 

no requiere autenticacion, no permite compartir o recuperar la sesion y es cero recomendable
para datos privados. 

a diferencia del locla storage una API real

es un poco mas lenta en el caso de carga de informacion.
tiene un control completo del backend
y requiere autenticacion.

tambien permite compartir o recuperar sesion, ya sea que estes en tu celular o el navegador de tu compu
no habria problema.

tambien guardar tu info privada en el backend es muchisimo mas seguro. 



para uitilizar el local storage en la consola, se escribe localStorage y nos devuelve
un objeto de tipo storage{lenght:0}, lenght es la propiedad del objeto que devuelve la cantidad
de objetos almacenados en el storage.

los valores tienen que tener valores clave del valor que se van a guardar.

La diferencia del objeto en js con el objeto en localStorage es que se borraran

el meto getItem lee info, setItem guarda y removeItem elimina.


el setItem funciona de la siguiente manera:

localStorage.setItem('palabra clave','valor');

si se vuelve a revisar el localStorage la longitud cambia porque ya se tiene un valor guardado.

si se recarga la pagina y se llama de nueva cuenta al localStorage el elemento sigue guardado, por que el 
almacenamiento es local.

para poder asignar el valor de la variable contenida dentro del storage se tiene que obtener mediante
el metodo getItem, de tal forma que se puede asignar como sigue:

localStorage.setItem('danilo','Daniel Sanchez Barrera');

const miNombre = localStorage.getItem('danilo');

y al llamara la variable devuelve Daniel Sanchez Barrera... ah perro, esta potente!

cuando se aplica sel set, la llave valor debe siempre ponerse con comillas, de lo contrario dara un error.


localStorage, no puede guardar objetos ni arrays, solo valores. (chales ya me habria emocionado jaja)

json.parse y json.stringify. Ayudan a que ahora si se pueda guardar en el local storgae, pero seguramente tendra el mismo problema
cuando se copian los objetos cuando tienen funciones.

esto se emplea de la siguiente manera:

const obj = {a:"a"};

localStorage.setItem('liked_movies': JSON.stringify(obj));

de esta forma al consultar el local, se entregara un objeto vuelto string.

para acceder al objeto con sus cualidades de objeto se tiene que usar JSON.parse()

JSON.parse(localStorage.getItem('liked_movies')).


para guardar las movies favoritas en el localStorage:

en el codigo, lo que hacemos es delcarar una funcion likeMovie que recibe una movie, esta funcion
servira para agregar o quitar las peliculas a las que se les de like. Para esto necesitamos saber
si una pelicula ya esta o no en una lista de peliculas. Con apoyo de la funcion likedMoiveList, buscamos
saber si dentro del local existe la pelicula dentro de la lista. 

Creamos una variable item la cual es igual a lo que tenemos en liked_movies del localStorage
declaramos una variable movies. Con un condicional validaremos lo que nos devuelve items.

si item existe, entonces movies es igual al lo que existe, si no, movies devolvera un objeto vacio.

esta funcion retornara el valor de movies despues de la validacion.

Volviendo a la funcion liked movies, lo que necesitamoes es que ahora si valide si la 


internalizacion -  mostrar dependiendo de la localizacion, el idioma de la app.


deploy
    las api key en los deploy no se puede asegurar, dado que la api key se usa para el fronten,
    lo cual es publico y en el inspector de elementos se puede observar la api key que se hace
    en acada peticion, ademas que si se la agregamos en el repo se tendra que agregar al repositorio.

la api nos da herramientas para saber quien esta aceesando y de alguna manera tener control, como cuantas
sesion estan abiertas, etc... 

github pages nos permite hacer despliegue de archivos estaticos.

la forma con la que se podria proteger nuestra apikey seria controlando nuestro propio backend.

esta app tiene de por si un backend que la hace funcionar. Git hub pages no permite hacer eso
pero al parecer hay otros lugares donde si se puede.

